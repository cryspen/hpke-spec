var searchIndex = JSON.parse('{\
"hacspec_aes128_gcm":{"doc":"","t":[6,17,5,5],"n":["AesGcmByteSeqResult","INVALID_TAG","decrypt_aes128","encrypt_aes128"],"q":["hacspec_aes128_gcm","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,[[1,2,3,3,4],5],[[1,2,3,3]]],"p":[[3,"Key128"],[3,"AesNonce"],[6,"ByteSeq"],[3,"Gf128Tag"],[6,"AesGcmByteSeqResult"]]},\
"hacspec_chacha20poly1305":{"doc":"","t":[6,6,6,4,13,11,11,5,5,5,11,11,5,11,5,11,11,11],"n":["ByteSeqResult","ChaChaPolyIV","ChaChaPolyKey","Error","InvalidTag","borrow","borrow_mut","chacha20_poly1305_decrypt","chacha20_poly1305_encrypt","finish","fmt","from","init","into","poly1305_update_padded","try_from","try_into","type_id"],"q":["hacspec_chacha20poly1305","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,8,8,8,0,0,0,8,8,0,8,0,8,8,8],"f":[0,0,0,0,0,[[]],[[]],[[1,2,3,3,4],5],[[1,2,3,3]],[[6,6,7],4],[[8,9],10],[[]],[[1,2],7],[[]],[[3,7],7],[[],11],[[],11],[[],12]],"p":[[6,"ChaChaPolyKey"],[6,"ChaChaPolyIV"],[6,"ByteSeq"],[3,"Poly1305Tag"],[6,"ByteSeqResult"],[15,"usize"],[6,"PolyState"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_curve25519":{"doc":"","tn":["0","0","FieldCanvas","ONE","ONE","ONE","ONE","Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","X25519FieldElement","X25519SerializedPoint","X25519SerializedScalar","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","concat","create","create","declassify","declassify","declassify_eq","declassify_eq","default","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice_range","from_slice_range","from_vec","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","len","len","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","new","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update_slice","update_slice","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","x25519_scalarmult","x25519_secret_to_public"],"q":["hacspec_curved":["","","","","","","","","","","","","","","Fixed length byte array.","Fixed length byte array.","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,6,0,1,2,3,4,0,0,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,5,6,2,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,2,2,2,3,3,3,4,4,4,5,6,1,1,1,2,2,3,3,3,4,4,5,6,5,6,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,6,5,6,1,2,3,4,2,4,5,6,2,4,5,6,1,2,3,4,5,6,5,6,5,6,1,2,3,4,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,5,5,5,5,6,6,6,6,6,5,5,5,5,6,6,6,6,1,1,1,2,2,3,3,3,4,4,5,6,2,4,1,1,2,2,3,3,4,4,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,1,2,3,4,5,6,1,3,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,2,4,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,2,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0],"f":[0,0,0,[[],1],[[],2],[[],3],[[],4],0,0,[[],1],[[],2],[[],3],[[],4],0,0,0,[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[5,[[11,[10]]]],[6,[[11,[10]]]],[7,5],[7,6],[2,12],[4,12],[[5,5],8],[[6,6],8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,13],1],[[2,13],2],[[3,13],3],[[4,13],4],[[5,13],5],[[6,13],6],[[1,14],15],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[4,14],15],[[5,14],15],[[6,14],15],[12,1],[16,1],[[]],[[]],[1,2],[12,3],[[]],[16,3],[[]],[3,4],[[]],[[]],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[17,[10]]],2],[[[17,[10]]],4],[1,2],[3,4],[18,1],[18,2],[18,3],[18,4],[18,5],[18,6],[19,1],[19,2],[19,3],[19,4],[[],1],[[],2],[[],3],[[],4],[20,1],[20,1],[20,2],[20,2],[20,3],[20,3],[20,4],[20,4],[[],5],[[],6],[[],5],[[],6],[[[17,[21]]],1],[[[17,[21]]],2],[[[17,[21]]],3],[[[17,[21]]],4],[[[17,[21]]],2],[[[17,[21]]],4],[[],5],[[],6],[22,2],[22,4],[[],5],[[],6],[23,1],[23,2],[23,3],[23,4],[[7,7],5],[[7,7],6],[[[24,[7]]],5],[[[24,[7]]],6],[[[25,[10]]],5],[[[25,[10]]],6],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[5,7,7]],[[6,7,7]],[[5,7,7],7],[[6,7,7],7],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[5,26],10],[[5,21],10],[[5,7],10],[[5,27]],[[5,13],10],[[6,21],10],[[6,27]],[[6,13],10],[[6,7],10],[[6,26],10],[[5,21],10],[[5,7],10],[[5,26],10],[[5,13],10],[[6,7],10],[[6,13],10],[[6,21],10],[[6,26],10],[1,16],[[]],[1,12],[2,1],[[]],[3,12],[[]],[3,16],[4,3],[[]],[[]],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[4,4],[[4,4],4],[[5,5],5],[[6,6],6],[5,[[28,[10]]]],[6,[[28,[10]]]],[5,7],[6,7],[[],7],[[],7],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[2,2],[4,4],[[],5],[[],6],[1],[2],[3],[4],[5],[6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[5,7],7],[[6,7],7],[[1,1],[[29,[9]]]],[[2,2],[[29,[9]]]],[[3,3],[[29,[9]]]],[[4,4],[[29,[9]]]],[[1,20,1],1],[[2,20],2],[[3,20,3],3],[[4,20],4],[7,1],[7,2],[7,3],[7,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7,1,7],1],[[2,7,2,7],2],[[3,7,3,7],3],[[4,7,4,7],4],[[1,1,7],1],[[2,2,7],2],[[3,3,7],3],[[4,4,7],4],[[5,7,7],5],[[6,7,7],6],[[1,7]],[[2,7]],[[3,7]],[[4,7]],[[5,7]],[[6,7]],[[1,7]],[[2,7]],[[3,7]],[[4,7]],[[5,7]],[[6,7]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[5,7,7],[[11,[10]]]],[[6,7,7],[[11,[10]]]],[[5,[24,[7]]],[[11,[10]]]],[[6,[24,[7]]],[[11,[10]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[5,[[11,[22]]]],[6,[[11,[22]]]],[5,[[11,[22]]]],[6,[[11,[22]]]],[5,[[11,[30]]]],[6,[[11,[30]]]],[5,[[11,[31]]]],[6,[[11,[31]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[1,[[11,[10]]]],[2,[[11,[10]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[2,[[11,[10]]]],[4,[[11,[10]]]],[5,19],[6,19],[5,[[11,[30]]]],[6,[[11,[30]]]],[5,[[11,[31]]]],[6,[[11,[31]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[11,[21]]]],[4,[[11,[21]]]],[2,[[11,[21]]]],[4,[[11,[21]]]],[[],19],[[],19],[[],19],[[],19],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[5,7],5],[[6,7],6],[[5,7,7,7],5],[[6,7,7,7],6],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[6,5],5],[6,5]],"p":[[3,"FieldCanvas"],[3,"X25519FieldElement"],[3,"ScalarCanvas"],[3,"Scalar"],[3,"X25519SerializedPoint"],[3,"X25519SerializedScalar"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[4,"Option"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_hkdf":{"doc":"","t":[6,4,13,11,11,5,5,11,11,11,11,11,11],"n":["HkdfByteSeqResult","HkdfError","InvalidOutputLength","borrow","borrow_mut","expand","extract","fmt","from","into","try_from","try_into","type_id"],"q":["hacspec_hkdf","","","","","","","","","","","",""],"d":["","","","","","Expand a key prk, using potentially empty info, and output …","Extract a pseudo-random key from input key material (IKM) …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,5,5,5,0,0,5,5,5,5,5,5],"f":[0,0,0,[[]],[[]],[[1,1,2],3],[[1,1],4],[[5,6],7],[[]],[[]],[[],8],[[],8],[[],9]],"p":[[6,"ByteSeq"],[15,"usize"],[6,"HkdfByteSeqResult"],[3,"PRK"],[4,"HkdfError"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_p256":{"doc":"","t":[12,6,6,3,4,3,13,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Affine","AffineResult","Element","Error","FieldCanvas","InvalidAddition","ONE","ONE","ONE","ONE","P256FieldElement","P256Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","create","declassify","declassify","declassify_eq","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice_range","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","len","length","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","p256_calculate_w","p256_point_mul","p256_point_mul_base","p256_validate_private_key","p256_validate_public_key","partial_cmp","partial_cmp","partial_cmp","partial_cmp","point_add","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice_range","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_le","to_be_U32s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_le_U32s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update_slice","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pd":["","","","Fixed length byte array.","","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","Verify that k != 0 &amp;&amp; k &lt; …","Verify that the point <code>p</code> is a valid public key.","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,0,0,0,0,0,13,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,1,2,3,4,5,13,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,5,2,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,1,1,1,2,2,2,3,3,3,4,4,4,5,13,1,1,1,2,2,3,3,3,4,4,5,5,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,5,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,5,1,2,3,4,2,4,5,2,4,5,1,2,3,4,5,5,5,1,2,3,4,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,5,5,5,5,5,5,5,5,13,1,1,1,2,2,3,3,3,4,4,5,2,4,1,1,2,2,3,3,4,4,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,2,4,1,2,3,4,5,1,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,2,4,5,1,2,3,4,5,1,2,3,4,5,5,0,0,0,0,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,5,1,2,3,4,5,1,2,3,4,5,5,5,5,5,1,2,3,4,5,1,2,3,4,2,4,5,5,5,1,2,3,4,5,1,2,3,4,5,2,4,2,4,1,2,3,4,13,1,2,3,4,5,13,1,2,3,4,5,13,1,2,3,4,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,0,0,[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,6],7],[[2,6],7],[[3,6],7],[[4,6],7],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[5,[[10,[9]]]],[6,5],[2,11],[4,11],[[5,5],7],[[],1],[[],2],[[],3],[[],4],[[],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[13,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[4,14],15],[[5,14],15],[[]],[16,1],[[]],[11,1],[[]],[1,2],[16,3],[11,3],[[]],[3,4],[[]],[[]],[[],5],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[17,[9]]],2],[[[17,[9]]],4],[1,2],[3,4],[18,1],[18,2],[18,3],[18,4],[18,5],[19,1],[19,2],[19,3],[19,4],[[],1],[[],2],[[],3],[[],4],[20,1],[20,1],[20,2],[20,2],[20,3],[20,3],[20,4],[20,4],[[],5],[[],5],[[[17,[21]]],1],[[[17,[21]]],2],[[[17,[21]]],3],[[[17,[21]]],4],[[[17,[21]]],2],[[[17,[21]]],4],[[],5],[22,2],[22,4],[[],5],[23,1],[23,2],[23,3],[23,4],[[6,6],5],[[[24,[6]]],5],[[[25,[9]]],5],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[5,6,6]],[[5,6,6],6],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[5,21],9],[[5,12],9],[[5,26],9],[[5,6],9],[[5,27]],[[5,6],9],[[5,21],9],[[5,12],9],[[5,26],9],[[]],[1,11],[[]],[1,16],[2,1],[[]],[3,11],[3,16],[[]],[4,3],[[]],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[[4,4],4],[4,4],[[5,5],5],[5,[[28,[9]]]],[5,6],[[],6],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],5],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[2,2],[4,4],[[],5],[1],[2],[3],[4],[5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[5,6],6],[2,2],[[4,29],30],[4,30],[31,7],[29,7],[[1,1],[[32,[8]]]],[[2,2],[[32,[8]]]],[[3,3],[[32,[8]]]],[[4,4],[[32,[8]]]],[[29,29],30],[[1,20,1],1],[[2,20],2],[[3,20,3],3],[[4,20],4],[6,1],[6,2],[6,3],[6,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[1,6,1,6],1],[[2,6,2,6],2],[[3,6,3,6],3],[[4,6,4,6],4],[[1,1,6],1],[[2,2,6],2],[[3,3,6],3],[[4,4,6],4],[[5,6,6],5],[[1,6]],[[2,6]],[[3,6]],[[4,6]],[[5,6]],[[1,6]],[[2,6]],[[3,6]],[[4,6]],[[5,6]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[5,6,6],[[10,[9]]]],[[5,[24,[6]]],[[10,[9]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[5,[[10,[22]]]],[5,[[10,[22]]]],[5,[[10,[33]]]],[5,[[10,[34]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[10,[9]]]],[1,[[10,[9]]]],[2,[[10,[9]]]],[3,[[10,[9]]]],[4,[[10,[9]]]],[2,[[10,[9]]]],[4,[[10,[9]]]],[5,19],[5,[[10,[33]]]],[5,[[10,[34]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[2,[[10,[21]]]],[4,[[10,[21]]]],[2,[[10,[21]]]],[4,[[10,[21]]]],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[5,6],5],[[5,6,6,6],5],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5]],"p":[[3,"FieldCanvas"],[3,"P256FieldElement"],[3,"ScalarCanvas"],[3,"P256Scalar"],[3,"Element"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[6,"Affine"],[6,"AffineResult"],[6,"ByteSeq"],[4,"Option"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hpke":{"doc":"HPKE 🤝 hacspec","t":[12,12,12,12,12,12,12,12,6,6,5,5,6,5,5,6,3,3,3,5,6,6,5,5,6,5,4,6,6,5,5,6,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","1","1","1","2","3","AdditionalData","Ciphertext","ComputeNonce","ContextR_Open","ContextResult","ContextS_Seal","Context_Export","EmptyResult","HPKECiphertext","HPKEConfig","HPKEKeyPair","HpkeOpen","HpkePrivateKey","HpkePublicKey","HpkeSeal","IncrementSeq","KemOutput","KeySchedule","Mode","Psk","PskId","ReceiveExport","SendExport","SenderContextResult","SetupAuthPSKR","SetupAuthPSKS","SetupAuthR","SetupAuthS","SetupBaseR","SetupBaseS","SetupPSKR","SetupPSKS","VerifyPSKInputs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","fmt","from","from","from","from","into","into","into","into","mode_auth","mode_auth_psk","mode_base","mode_psk","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["hpke","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Compute Nonce","Stateful open.","","Encryption and Decryption","Secret Export","","","","","Decryption","","","Encryption","Increment Sequence","","Creating the Encryption Context","A one-byte value indicating the HPKE mode, defined in the …","","","“single-shot” secret export receiver","“single-shot” secret export sender","","Authentication using both a PSK and an Asymmetric Key - …","Authentication using both a PSK and an Asymmetric Key - …","Authentication using an Asymmetric Key - Receiver","Authentication using an Asymmetric Key - Sender","Encryption to a Public Key - Receiver","Encryption to a Public Key - Sender","Authentication using a Pre-Shared Key - Receiver","Authentication using a Pre-Shared Key - Sender","Creating the Encryption Context","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","0x02","0x03","0x00","0x01","","","","","","","","","","","","","",""],"i":[30,7,10,30,7,10,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,25,7,10,30,25,7,10,25,7,25,7,10,25,25,30,25,7,10,30,25,7,10,25,25,25,25,25,7,30,25,7,10,30,25,7,10,30,25,7,10],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[1,4,4],[[6,[5]]]],0,[[1,4,4],[[6,[5]]]],[[7,4,8],9],0,0,0,0,[[7,10,11,12,13,[15,[14]],[15,[16]],[15,[17]]],9],0,0,[[7,17,12,13,4,[15,[14]],[15,[16]],[15,[11]],18],[[6,[10,5]]]],[[1,3],[[6,[3,5]]]],0,[[7,19,12,14,16],20],0,0,0,[[7,10,11,12,4,8,[15,[14]],[15,[16]],[15,[17]]],9],[[7,17,12,4,8,[15,[14]],[15,[16]],[15,[11]],18],[[6,[10,5]]]],0,[[7,4,11,12,14,16,21],20],[[7,17,12,14,16,11,18],22],[[7,4,11,12,21],20],[[7,17,12,23,18],22],[[7,4,11,12],20],[[7,17,12,18],22],[[7,4,11,12,14,16],20],[[7,17,12,14,16,18],22],[[7,14,16],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[7,7],[[]],[[]],[[],10],[[25,25],26],[[25,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29]],"p":[[4,"AEAD"],[6,"Nonce"],[15,"u32"],[6,"ByteSeq"],[4,"HpkeError"],[4,"Result"],[3,"HPKEConfig"],[15,"usize"],[6,"HpkeByteSeqResult"],[3,"HPKECiphertext"],[6,"HpkePrivateKey"],[6,"Info"],[6,"AdditionalData"],[6,"Psk"],[4,"Option"],[6,"PskId"],[6,"HpkePublicKey"],[6,"Randomness"],[6,"SharedSecret"],[6,"ContextResult"],[6,"PublicKey"],[6,"SenderContextResult"],[6,"PrivateKey"],[6,"EmptyResult"],[4,"Mode"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"HPKEKeyPair"]]},\
"hpke_aead":{"doc":"Authenticated Encryption (AEAD)","t":[4,13,13,5,5,13,13,6,5,5,6,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AEAD","AES_128_GCM","AES_256_GCM","AeadOpen","AeadSeal","ChaCha20Poly1305","Export_only","Key","Nk","Nn","Nonce","Nt","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["hpke_aead","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Authenticated Encryption with Associated Data (AEAD) …","0x0001","0x0002","Decrypt ciphertext and tag <code>ct</code> using associated data <code>aad</code> …","Encrypt and authenticate plaintext <code>pt</code> with associated data …","0x0003","0xFFFF","An AEAD key is a sequence of bytes.","The length in bytes of a key for this algorithm.","The length in bytes of a nonce for this algorithm.","An AEAD nonce is a sequence of bytes.","The length in bytes of the authentication tag for this …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[[1,2,3,4,4],5],[[1,2,3,6,6],5],0,0,0,[1,7],[1,7],0,[1,7],[[]],[[]],[1,1],[[]],[[1,1],8],[[1,9],10],[[]],[[]],[[]],[[],11],[[],11],[[],12]],"p":[[4,"AEAD"],[6,"Key"],[6,"Nonce"],[6,"ByteSeq"],[6,"HpkeByteSeqResult"],[3,"Seq"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hpke_errors":{"doc":"HPKE Errors","t":[13,13,13,13,13,6,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CryptoError","DecapError","DeriveKeyPairError","DeserializeError","EncapError","HpkeByteSeqResult","HpkeError","InconsistentPskInputs","InvalidParameters","MessageLimitReachedError","MissingPsk","OpenError","UnnecessaryPsk","UnsupportedAlgorithm","ValidationError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["hpke_errors","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An opaque error happened in a crypto operation outside of …","<code>Decap()</code> failure.","Key pair derivation failure.","Public or private key deserialization failure.","<code>Encap()</code> failure.","A <code>Result</code> type that returns a <code>ByteSeq</code> or an <code>HpkeError</code>.","Explicit errors generated throughout this specification.","PSK inputs are inconsistent.","Parameters to an algorithm are inconsistent or wrong.","Context AEAD sequence number overflow.","Missing required PSK input.","Context AEAD <code>Open()</code> failure.","PSK input provided when not needed.","An algorithm is not supported by the implementation.","KEM input or output validation failure.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],[[]],[[]],[[],5],[[],5],[[],6]],"p":[[4,"HpkeError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hpke_kdf":{"doc":"Key Derivation","t":[13,13,13,6,6,4,5,5,5,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["HKDF_SHA256","HKDF_SHA384","HKDF_SHA512","Info","InputKeyMaterial","KDF","LabeledExpand","LabeledExtract","Nh","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","kdf_value","to_owned","try_from","try_into","type_id"],"q":["hpke_kdf","","","","","","","","","","","","","","","","","","","","",""],"d":["0x0001","0x0002","0x0003","","","Key Derivation Functions (KDFs)","KDF: Labeled Expand","LabeledExtract","The output size of the <code>Extract()</code> function in bytes.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the numeric value of the <code>kdf_id</code>.","","","",""],"i":[1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,0,0,0,0,0,[[1,2,2,2,3,4],5],[[1,2,2,2,6],5],[1,4],[[]],[[]],[1,1],[[]],[[1,1],7],[[1,8],9],[[]],[[]],[1,10],[[]],[[],11],[[],11],[[],12]],"p":[[4,"KDF"],[6,"ByteSeq"],[6,"Info"],[15,"usize"],[6,"HpkeByteSeqResult"],[6,"InputKeyMaterial"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"U16"],[4,"Result"],[3,"TypeId"]]},\
"hpke_kem":{"doc":"Key Encapsulation Mechanism (KEM)","t":[5,5,5,13,13,13,13,13,5,5,5,5,5,6,5,4,6,5,5,5,5,5,6,6,6,5,6,6,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["AuthDecap","AuthEncap","DH","DHKEM_P256_HKDF_SHA256","DHKEM_P384_HKDF_SHA384","DHKEM_P521_HKDF_SHA512","DHKEM_X25519_HKDF_SHA256","DHKEM_X448_HKDF_SHA512","Decap","DeriveKeyPair","DeriveKeyPairX","DeserializePublicKey","Encap","EncapResult","GenerateKeyPair","KEM","KeyPair","Ndh","Nenc","Npk","Nsecret","Nsk","PrivateKey","PublicKey","Randomness","SerializePublicKey","SerializedPublicKey","SharedSecret","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","kem_value","to_owned","try_from","try_into","type_id"],"q":["hpke_kem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Perform a non-interactive Diffie-Hellman exchange using …","0x0010","0x0011","0x0012","0x0020","0x0021","","DeriveKeyPair","For X25519 and X448, the <code>DeriveKeyPair()</code> function applies …","Parse a byte string of length <code>Npk</code> to recover a public key. …","","","Randomized algorithm to generate a key pair <code>(skX, pkX)</code>.","Key Encapsulation Mechanisms (KEMs)","","The length in bytes of a Diffie-Hellman shared secret …","Get the length of the encoded encapsulated key.","Get the length of the encoded public key.","Get the length of the shared secret.","Get the length of the private key.","","","","Produce a byte string of length <code>Npk</code> encoding the public …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>u16</code> value of the <code>kem_id</code>.","","","",""],"i":[0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[[[1,2,3,4],[[7,[5,6]]]],[[1,4,3,8],9],[[1,3,4],[[7,[5,6]]]],0,0,0,0,0,[[1,2,3],[[7,[5,6]]]],[[1,10],[[7,[11,6]]]],[[1,10],[[7,[11,6]]]],[[1,2],12],[[1,4,8],9],0,[[1,8],[[7,[11,6]]]],0,0,[1,13],[1,13],[1,13],[1,13],[1,13],0,0,0,[[1,4],4],0,0,[[]],[[]],[1,1],[[]],[[1,1],14],[[1,15],16],[[]],[[]],[1,17],[[]],[[],7],[[],7],[[],18]],"p":[[4,"KEM"],[6,"ByteSeq"],[6,"PrivateKey"],[6,"PublicKey"],[6,"SharedSecret"],[4,"HpkeError"],[4,"Result"],[6,"Randomness"],[6,"EncapResult"],[6,"InputKeyMaterial"],[6,"KeyPair"],[6,"HpkeByteSeqResult"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"U16"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
