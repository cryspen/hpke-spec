var searchIndex = JSON.parse('{\
"hacspec_aes128_gcm":{"doc":"","t":[6,17,5,5],"n":["AesGcmByteSeqResult","INVALID_TAG","decrypt_aes128","encrypt_aes128"],"q":["hacspec_aes128_gcm","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[null,null,[[["key128",3],["aesnonce",3],["byteseq",6],["byteseq",6],["gf128tag",3]],["aesgcmbyteseqresult",6]],[[["key128",3],["aesnonce",3],["byteseq",6],["byteseq",6]]]],"p":[]},\
"hacspec_chacha20poly1305":{"doc":"","t":[6,6,6,4,13,11,11,5,5,5,11,11,5,11,5,11,11,11],"n":["ByteSeqResult","ChaChaPolyIV","ChaChaPolyKey","Error","InvalidTag","borrow","borrow_mut","chacha20_poly1305_decrypt","chacha20_poly1305_encrypt","finish","fmt","from","init","into","poly1305_update_padded","try_from","try_into","type_id"],"q":["hacspec_chacha20poly1305","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[["chachapolykey",6],["chachapolyiv",6],["byteseq",6],["byteseq",6],["poly1305tag",3]],["byteseqresult",6]],[[["chachapolykey",6],["chachapolyiv",6],["byteseq",6],["byteseq",6]]],[[["usize",15],["usize",15],["polystate",6]],["poly1305tag",3]],[[["formatter",3]],["result",6]],[[]],[[["chachapolykey",6],["chachapolyiv",6]],["polystate",6]],[[]],[[["byteseq",6],["polystate",6]],["polystate",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Error"]]},\
"hacspec_curve25519":{"doc":"","t":[12,12,3,11,11,11,11,3,3,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["0","0","FieldCanvas","ONE","ONE","ONE","ONE","Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","X25519FieldElement","X25519SerializedPoint","X25519SerializedScalar","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","concat","create","create","declassify","declassify","declassify_eq","declassify_eq","default","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice_range","from_slice_range","from_vec","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","len","len","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","new","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update_slice","update_slice","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","x25519_scalarmult","x25519_secret_to_public"],"q":["hacspec_curved":["","","","","","","","","","","","","","","Fixed length byte array.","Fixed length byte array.","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,3,4,5,6,0,0,3,4,5,6,0,0,0,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,2,1,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,3,4,5,6,1,2,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,3,3,4,4,4,5,5,5,6,6,6,1,2,3,3,3,4,4,5,5,5,6,6,1,2,1,2,3,4,5,6,3,4,5,6,4,6,4,6,3,4,5,6,1,2,3,4,5,6,3,4,5,6,3,3,4,4,5,5,6,6,1,2,1,2,3,4,5,6,4,6,1,2,4,6,1,2,3,4,5,6,1,2,1,2,1,2,3,4,5,6,1,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,1,1,1,1,2,2,2,2,2,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,5,6,6,1,2,4,6,3,3,4,4,5,5,6,6,1,2,1,2,1,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,4,6,3,4,5,6,1,2,3,5,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,2,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,2,1,2,1,2,1,2,3,4,5,6,1,2,3,4,5,6,4,6,1,2,1,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,4,6,4,6,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,2,1,2,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,0,0],"f":[null,null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["x25519fieldelement",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["scalar",3]],["scalar",3]],[[["x25519serializedpoint",3]],["x25519serializedpoint",3]],[[["x25519serializedscalar",3]],["x25519serializedscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["x25519fieldelement",3]],[[],["scalarcanvas",3]],[[],["scalar",3]],[[],["x25519serializedpoint",3]],[[],["x25519serializedscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["ordering",4]],[[],["ordering",4]],[[["scalarcanvas",3]],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[["usize",15]]],[[["usize",15]]],[[],["bigint",3]],[[],["bigint",3]],[[],["bool",15]],[[],["bool",15]],[[],["fieldcanvas",3]],[[],["x25519fieldelement",3]],[[],["scalarcanvas",3]],[[],["scalar",3]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["x25519fieldelement",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["scalar",3]],["scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["bool",15]],[[],["bool",15]],[[["scalarcanvas",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bigint",3]],["fieldcanvas",3]],[[]],[[["biguint",3]],["fieldcanvas",3]],[[]],[[["fieldcanvas",3]],["x25519fieldelement",3]],[[]],[[["biguint",3]],["scalarcanvas",3]],[[["bigint",3]],["scalarcanvas",3]],[[]],[[["scalarcanvas",3]],["scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["x25519fieldelement",3]],[[],["scalarcanvas",3]],[[],["scalar",3]],[[["seqtrait",8,[["u8",3]]]],["x25519fieldelement",3]],[[["seqtrait",8,[["u8",3]]]],["scalar",3]],[[["fieldcanvas",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalar",3]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]],["x25519serializedpoint",3]],[[["str",15]],["x25519serializedscalar",3]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[],["x25519serializedpoint",3]],[[],["x25519serializedscalar",3]],[[["seqtrait",8,[["u8",15]]]],["fieldcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["x25519fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["scalarcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["scalar",3]],[[["seqtrait",8,[["u8",15]]]],["x25519fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["scalar",3]],[[],["x25519serializedpoint",3]],[[],["x25519serializedscalar",3]],[[["u128",3]],["x25519fieldelement",3]],[[["u128",3]],["scalar",3]],[[],["x25519serializedpoint",3]],[[],["x25519serializedscalar",3]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["range",3,[["usize",15]]]]],[[["range",3,[["usize",15]]]]],[[["vec",3,[["u8",3]]]],["x25519serializedpoint",3]],[[["vec",3,[["u8",3]]]],["x25519serializedscalar",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u8",15]],["u8",3]],[[["usize",15]],["u8",3]],[[["u32",15]],["u8",3]],[[["i32",15]],["u8",3]],[[["rangefull",3]]],[[["rangefull",3]]],[[["usize",15]],["u8",3]],[[["u8",15]],["u8",3]],[[["u32",15]],["u8",3]],[[["i32",15]],["u8",3]],[[["u8",15]],["u8",3]],[[["usize",15]],["u8",3]],[[["u32",15]],["u8",3]],[[["i32",15]],["u8",3]],[[["i32",15]],["u8",3]],[[["usize",15]],["u8",3]],[[["u8",15]],["u8",3]],[[["u32",15]],["u8",3]],[[],["bigint",3]],[[],["biguint",3]],[[]],[[]],[[],["fieldcanvas",3]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3,[["u8",3]]]],[[],["iter",3,[["u8",3]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["x25519fieldelement",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["scalar",3]],["scalar",3]],[[["x25519serializedpoint",3]],["x25519serializedpoint",3]],[[["x25519serializedscalar",3]],["x25519serializedscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["fieldcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["scalarcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["usize",15]],["fieldcanvas",3]],[[["usize",15]],["x25519fieldelement",3]],[[["usize",15]],["scalarcanvas",3]],[[["usize",15]],["scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["x25519fieldelement",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["scalar",3]],["scalar",3]],[[["x25519serializedpoint",3]],["x25519serializedpoint",3]],[[["x25519serializedscalar",3]],["x25519serializedscalar",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]],["seq",3,[["u8",3]]]],[[["usize",15],["usize",15]],["seq",3,[["u8",3]]]],[[["range",3,[["usize",15]]]],["seq",3,[["u8",3]]]],[[["range",3,[["usize",15]]]],["seq",3,[["u8",3]]]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["x25519fieldelement",3]],["x25519fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["scalar",3]],["scalar",3]],[[["x25519serializedpoint",3]],["x25519serializedpoint",3]],[[["x25519serializedscalar",3]],["x25519serializedscalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u64",3]]]],[[],["seq",3,[["u64",3]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["string",3]],[[],["string",3]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u64",3]]]],[[],["seq",3,[["u64",3]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["x25519serializedscalar",3],["x25519serializedpoint",3]],["x25519serializedpoint",3]],[[["x25519serializedscalar",3]],["x25519serializedpoint",3]]],"p":[[3,"X25519SerializedPoint"],[3,"X25519SerializedScalar"],[3,"FieldCanvas"],[3,"X25519FieldElement"],[3,"ScalarCanvas"],[3,"Scalar"]]},\
"hacspec_hkdf":{"doc":"","t":[6,4,13,11,11,5,5,11,11,11,11,11,11],"n":["HkdfByteSeqResult","HkdfError","InvalidOutputLength","borrow","borrow_mut","expand","extract","fmt","from","into","try_from","try_into","type_id"],"q":["hacspec_hkdf","","","","","","","","","","","",""],"d":["","","","","","Expand a key prk, using potentially empty info, and output …","Extract a pseudo-random key from input key material (IKM) …","","","","","",""],"i":[0,0,1,1,1,0,0,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[["byteseq",6],["byteseq",6],["usize",15]],["hkdfbyteseqresult",6]],[[["byteseq",6],["byteseq",6]],["prk",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"HkdfError"]]},\
"hacspec_p256":{"doc":"","t":[12,6,6,3,4,3,13,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Affine","AffineResult","Element","Error","FieldCanvas","InvalidAddition","ONE","ONE","ONE","ONE","P256FieldElement","P256Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","create","declassify","declassify","declassify_eq","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice_range","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","greater_than_or_qual","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","len","length","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","p256_calculate_w","p256_point_mul","p256_point_mul_base","p256_validate_private_key","p256_validate_public_key","partial_cmp","partial_cmp","partial_cmp","partial_cmp","point_add","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice_range","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_le","to_be_U32s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_le_U32s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update_slice","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pd":["","","","Fixed length byte array.","","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invert self modulo n.","","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","Verify that k != 0 &amp;&amp; k &lt; …","Verify that the point <code>p</code> is a valid public key.","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,2,3,4,5,6,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,1,4,6,1,3,4,5,6,1,3,4,5,6,3,4,5,6,1,3,4,5,6,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,2,3,3,3,4,4,4,5,5,5,6,6,6,1,2,3,3,3,4,4,5,5,5,6,6,1,1,3,4,5,6,3,4,5,6,4,6,4,6,3,4,5,6,1,3,4,5,6,3,4,5,6,3,3,4,4,5,5,6,6,1,1,3,4,5,6,4,6,1,4,6,1,3,4,5,6,1,1,1,3,4,5,6,1,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,1,1,1,1,1,1,1,1,1,2,3,3,3,4,4,5,5,5,6,6,1,4,6,3,3,4,4,5,5,6,6,1,1,1,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,4,6,3,4,5,6,1,3,5,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,4,6,1,3,4,5,6,1,3,4,5,6,1,1,0,0,0,0,0,3,4,5,6,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,1,1,3,4,5,6,1,3,4,5,6,1,1,1,1,1,3,4,5,6,1,3,4,5,6,4,6,1,1,1,3,4,5,6,1,3,4,5,6,1,4,6,4,6,3,4,5,6,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1,3,4,5,6,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["p256scalar",3]],["p256scalar",3]],[[["element",3]],["element",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["p256fieldelement",3]],[[],["scalarcanvas",3]],[[],["p256scalar",3]],[[],["element",3]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["ordering",4]],[[],["ordering",4]],[[["scalarcanvas",3]],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u8",3]]]],[[["usize",15]]],[[],["bigint",3]],[[],["bigint",3]],[[],["bool",15]],[[],["fieldcanvas",3]],[[],["p256fieldelement",3]],[[],["scalarcanvas",3]],[[],["p256scalar",3]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["p256scalar",3]],["p256scalar",3]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["bool",15]],[[],["bool",15]],[[["scalarcanvas",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["bigint",3]],["fieldcanvas",3]],[[]],[[["biguint",3]],["fieldcanvas",3]],[[]],[[["fieldcanvas",3]],["p256fieldelement",3]],[[["biguint",3]],["scalarcanvas",3]],[[["bigint",3]],["scalarcanvas",3]],[[]],[[["scalarcanvas",3]],["p256scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["p256fieldelement",3]],[[],["scalarcanvas",3]],[[],["p256scalar",3]],[[["seqtrait",8,[["u8",3]]]],["p256fieldelement",3]],[[["seqtrait",8,[["u8",3]]]],["p256scalar",3]],[[["fieldcanvas",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["p256scalar",3]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]],["element",3]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[],["element",3]],[[["seqtrait",8,[["u8",15]]]],["fieldcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["p256fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["scalarcanvas",3]],[[["seqtrait",8,[["u8",15]]]],["p256scalar",3]],[[["seqtrait",8,[["u8",15]]]],["p256fieldelement",3]],[[["seqtrait",8,[["u8",15]]]],["p256scalar",3]],[[],["element",3]],[[["u128",3]],["p256fieldelement",3]],[[["u128",3]],["p256scalar",3]],[[],["element",3]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15],["usize",15]]],[[["range",3,[["usize",15]]]]],[[["vec",3,[["u8",3]]]],["element",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u32",15]],["u8",3]],[[["rangefull",3]]],[[["i32",15]],["u8",3]],[[["usize",15]],["u8",3]],[[["u8",15]],["u8",3]],[[["usize",15]],["u8",3]],[[["u8",15]],["u8",3]],[[["u32",15]],["u8",3]],[[["i32",15]],["u8",3]],[[]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[]],[[],["fieldcanvas",3]],[[],["biguint",3]],[[]],[[],["bigint",3]],[[],["scalarcanvas",3]],[[]],[[]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3,[["u8",3]]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["fieldcanvas",3]],[[],["scalarcanvas",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["p256scalar",3]],["p256scalar",3]],[[["element",3]],["element",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["p256scalar",3],["affine",6]],["affineresult",6]],[[["p256scalar",3]],["affineresult",6]],[[["byteseq",6]],["bool",15]],[[["affine",6]],["bool",15]],[[["fieldcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["scalarcanvas",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["affine",6],["affine",6]],["affineresult",6]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["usize",15]],["fieldcanvas",3]],[[["usize",15]],["p256fieldelement",3]],[[["usize",15]],["scalarcanvas",3]],[[["usize",15]],["p256scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["p256scalar",3]],["p256scalar",3]],[[["element",3]],["element",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]],["seq",3,[["u8",3]]]],[[["range",3,[["usize",15]]]],["seq",3,[["u8",3]]]],[[["fieldcanvas",3]],["fieldcanvas",3]],[[["p256fieldelement",3]],["p256fieldelement",3]],[[["scalarcanvas",3]],["scalarcanvas",3]],[[["p256scalar",3]],["p256scalar",3]],[[["element",3]],["element",3]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u128",3]]]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u64",3]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["seq",3,[["u8",3]]]],[[],["string",3]],[[],["seq",3,[["u32",3]]]],[[],["seq",3,[["u64",3]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["seq",3,[["u8",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["seq",3,[["u8",15]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Element"],[4,"Error"],[3,"FieldCanvas"],[3,"P256FieldElement"],[3,"ScalarCanvas"],[3,"P256Scalar"]]},\
"hpke":{"doc":"HPKE 🤝 hacspec","t":[12,12,12,12,12,12,12,12,6,6,5,5,6,5,5,6,3,3,3,5,6,6,5,5,6,5,4,6,6,5,5,6,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","1","1","1","2","3","AdditionalData","Ciphertext","ComputeNonce","ContextR_Open","ContextResult","ContextS_Seal","Context_Export","EmptyResult","HPKECiphertext","HPKEConfig","HPKEKeyPair","HpkeOpen","HpkePrivateKey","HpkePublicKey","HpkeSeal","IncrementSeq","KemOutput","KeySchedule","Mode","Psk","PskId","ReceiveExport","SendExport","SenderContextResult","SetupAuthPSKR","SetupAuthPSKS","SetupAuthR","SetupAuthS","SetupBaseR","SetupBaseS","SetupPSKR","SetupPSKS","VerifyPSKInputs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","fmt","from","from","from","from","into","into","into","into","mode_auth","mode_auth_psk","mode_base","mode_psk","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["hpke","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Compute Nonce","Stateful open.","","Encryption and Decryption","Secret Export","","","","","Decryption","","","Encryption","Increment Sequence","","Creating the Encryption Context","A one-byte value indicating the HPKE mode, defined in the …","","","“single-shot” secret export receiver","“single-shot” secret export sender","","Authentication using both a PSK and an Asymmetric Key - …","Authentication using both a PSK and an Asymmetric Key - …","Authentication using an Asymmetric Key - Receiver","Authentication using an Asymmetric Key - Sender","Encryption to a Public Key - Receiver","Encryption to a Public Key - Sender","Authentication using a Pre-Shared Key - Receiver","Authentication using a Pre-Shared Key - Sender","Creating the Encryption Context","","","","","","","","","","","","","","","","","","","","","","","","0x02","0x03","0x00","0x01","","","","","","","","","","","","","",""],"i":[1,2,3,1,2,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,2,3,1,4,2,3,4,2,4,2,3,4,4,1,4,2,3,1,4,2,3,4,4,4,4,4,2,1,4,2,3,1,4,2,3,1,4,2,3],"f":[null,null,null,null,null,null,null,null,null,null,[[["aead",4],["nonce",6],["u32",15]],["byteseq",6]],[[["aead",4],["byteseq",6],["byteseq",6]],["result",4,[["hpkeerror",4]]]],null,[[["aead",4],["byteseq",6],["byteseq",6]],["result",4,[["hpkeerror",4]]]],[[["hpkeconfig",3],["byteseq",6],["usize",15]],["hpkebyteseqresult",6]],null,null,null,null,[[["hpkeconfig",3],["hpkeciphertext",3],["hpkeprivatekey",6],["info",6],["additionaldata",6],["option",4,[["psk",6]]],["option",4,[["pskid",6]]],["option",4,[["hpkepublickey",6]]]],["hpkebyteseqresult",6]],null,null,[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["additionaldata",6],["byteseq",6],["option",4,[["psk",6]]],["option",4,[["pskid",6]]],["option",4,[["hpkeprivatekey",6]]],["randomness",6]],["result",4,[["hpkeciphertext",3],["hpkeerror",4]]]],[[["aead",4],["u32",15]],["result",4,[["u32",15],["hpkeerror",4]]]],null,[[["hpkeconfig",3],["sharedsecret",6],["info",6],["psk",6],["pskid",6]],["contextresult",6]],null,null,null,[[["hpkeconfig",3],["hpkeciphertext",3],["hpkeprivatekey",6],["info",6],["byteseq",6],["usize",15],["option",4,[["psk",6]]],["option",4,[["pskid",6]]],["option",4,[["hpkepublickey",6]]]],["hpkebyteseqresult",6]],[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["byteseq",6],["usize",15],["option",4,[["psk",6]]],["option",4,[["pskid",6]]],["option",4,[["hpkeprivatekey",6]]],["randomness",6]],["result",4,[["hpkeciphertext",3],["hpkeerror",4]]]],null,[[["hpkeconfig",3],["byteseq",6],["hpkeprivatekey",6],["info",6],["psk",6],["pskid",6],["publickey",6]],["contextresult",6]],[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["psk",6],["pskid",6],["hpkeprivatekey",6],["randomness",6]],["sendercontextresult",6]],[[["hpkeconfig",3],["byteseq",6],["hpkeprivatekey",6],["info",6],["publickey",6]],["contextresult",6]],[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["privatekey",6],["randomness",6]],["sendercontextresult",6]],[[["hpkeconfig",3],["byteseq",6],["hpkeprivatekey",6],["info",6]],["contextresult",6]],[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["randomness",6]],["sendercontextresult",6]],[[["hpkeconfig",3],["byteseq",6],["hpkeprivatekey",6],["info",6],["psk",6],["pskid",6]],["contextresult",6]],[[["hpkeconfig",3],["hpkepublickey",6],["info",6],["psk",6],["pskid",6],["randomness",6]],["sendercontextresult",6]],[[["hpkeconfig",3],["psk",6],["pskid",6]],["emptyresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[],["hpkeconfig",3]],[[]],[[]],[[],["hpkeciphertext",3]],[[["mode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"HPKEKeyPair"],[3,"HPKEConfig"],[3,"HPKECiphertext"],[4,"Mode"]]},\
"hpke_aead":{"doc":"Authenticated Encryption (AEAD)","t":[4,13,13,5,5,13,13,6,5,5,6,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AEAD","AES_128_GCM","AES_256_GCM","AeadOpen","AeadSeal","ChaCha20Poly1305","Export_only","Key","Nk","Nn","Nonce","Nt","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["hpke_aead","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Authenticated Encryption with Associated Data (AEAD) …","0x0001","0x0002","Decrypt ciphertext and tag <code>ct</code> using associated data <code>aad</code> …","Encrypt and authenticate plaintext <code>pt</code> with associated data …","0x0003","0xFFFF","An AEAD key is a sequence of bytes.","The length in bytes of a key for this algorithm.","The length in bytes of a nonce for this algorithm.","An AEAD nonce is a sequence of bytes.","The length in bytes of the authentication tag for this …","","","","","","","","","","","",""],"i":[0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[["aead",4],["key",6],["nonce",6],["byteseq",6],["byteseq",6]],["hpkebyteseqresult",6]],[[["aead",4],["key",6],["nonce",6],["seq",3],["seq",3]],["hpkebyteseqresult",6]],null,null,null,[[["aead",4]],["usize",15]],[[["aead",4]],["usize",15]],null,[[["aead",4]],["usize",15]],[[]],[[]],[[],["aead",4]],[[]],[[["aead",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"AEAD"]]},\
"hpke_errors":{"doc":"HPKE Errors","t":[13,13,13,13,13,6,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CryptoError","DecapError","DeriveKeyPairError","DeserializeError","EncapError","HpkeByteSeqResult","HpkeError","InconsistentPskInputs","InvalidParameters","MessageLimitReachedError","MissingPsk","OpenError","UnnecessaryPsk","UnsupportedAlgorithm","ValidationError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":["hpke_errors","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An opaque error happened in a crypto operation outside of …","<code>Decap()</code> failure.","Key pair derivation failure.","Public or private key deserialization failure.","<code>Encap()</code> failure.","A <code>Result</code> type that returns a <code>ByteSeq</code> or an <code>HpkeError</code>.","Explicit errors generated throughout this specification.","PSK inputs are inconsistent.","Parameters to an algorithm are inconsistent or wrong.","Context AEAD sequence number overflow.","Missing required PSK input.","Context AEAD <code>Open()</code> failure.","PSK input provided when not needed.","An algorithm is not supported by the implementation.","KEM input or output validation failure.","","","","","","","","","","","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["hpkeerror",4]],[[]],[[["hpkeerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"HpkeError"]]},\
"hpke_kdf":{"doc":"Key Derivation","t":[13,13,13,6,6,4,5,5,5,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["HKDF_SHA256","HKDF_SHA384","HKDF_SHA512","Info","InputKeyMaterial","KDF","LabeledExpand","LabeledExtract","Nh","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","kdf_value","to_owned","try_from","try_into","type_id"],"q":["hpke_kdf","","","","","","","","","","","","","","","","","","","","",""],"d":["0x0001","0x0002","0x0003","","","Key Derivation Functions (KDFs)","KDF: Labeled Expand","LabeledExtract","The output size of the <code>Extract()</code> function in bytes.","","","","","","","","","Get the numeric value of the <code>kdf_id</code>.","","","",""],"i":[1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[null,null,null,null,null,null,[[["kdf",4],["byteseq",6],["byteseq",6],["byteseq",6],["info",6],["usize",15]],["hpkebyteseqresult",6]],[[["kdf",4],["byteseq",6],["byteseq",6],["byteseq",6],["inputkeymaterial",6]],["hpkebyteseqresult",6]],[[["kdf",4]],["usize",15]],[[]],[[]],[[],["kdf",4]],[[]],[[["kdf",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["kdf",4]],["u16",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"KDF"]]},\
"hpke_kem":{"doc":"Key Encapsulation Mechanism (KEM)","t":[5,5,5,13,13,13,13,13,5,5,5,5,5,6,5,4,6,5,5,5,5,5,6,6,6,5,6,6,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["AuthDecap","AuthEncap","DH","DHKEM_P256_HKDF_SHA256","DHKEM_P384_HKDF_SHA384","DHKEM_P521_HKDF_SHA512","DHKEM_X25519_HKDF_SHA256","DHKEM_X448_HKDF_SHA512","Decap","DeriveKeyPair","DeriveKeyPairX","DeserializePublicKey","Encap","EncapResult","GenerateKeyPair","KEM","KeyPair","Ndh","Nenc","Npk","Nsecret","Nsk","PrivateKey","PublicKey","Randomness","SerializePublicKey","SerializedPublicKey","SharedSecret","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","kem_value","to_owned","try_from","try_into","type_id"],"q":["hpke_kem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Perform a non-interactive Diffie-Hellman exchange using …","0x0010","0x0011","0x0012","0x0020","0x0021","","DeriveKeyPair","For X25519 and X448, the <code>DeriveKeyPair()</code> function applies …","Parse a byte string of length <code>Npk</code> to recover a public key. …","","","Randomized algorithm to generate a key pair <code>(skX, pkX)</code>.","Key Encapsulation Mechanisms (KEMs)","","The length in bytes of a Diffie-Hellman shared secret …","Get the length of the encoded encapsulated key.","Get the length of the encoded public key.","Get the length of the shared secret.","Get the length of the private key.","","","","Produce a byte string of length <code>Npk</code> encoding the public …","","","","","","","","","","","<code>u16</code> value of the <code>kem_id</code>.","","","",""],"i":[0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[[[["kem",4],["byteseq",6],["privatekey",6],["publickey",6]],["result",4,[["sharedsecret",6],["hpkeerror",4]]]],[[["kem",4],["publickey",6],["privatekey",6],["randomness",6]],["encapresult",6]],[[["kem",4],["privatekey",6],["publickey",6]],["result",4,[["sharedsecret",6],["hpkeerror",4]]]],null,null,null,null,null,[[["kem",4],["byteseq",6],["privatekey",6]],["result",4,[["sharedsecret",6],["hpkeerror",4]]]],[[["kem",4],["inputkeymaterial",6]],["result",4,[["keypair",6],["hpkeerror",4]]]],[[["kem",4],["inputkeymaterial",6]],["result",4,[["keypair",6],["hpkeerror",4]]]],[[["kem",4],["byteseq",6]],["hpkebyteseqresult",6]],[[["kem",4],["publickey",6],["randomness",6]],["encapresult",6]],null,[[["kem",4],["randomness",6]],["result",4,[["keypair",6],["hpkeerror",4]]]],null,null,[[["kem",4]],["usize",15]],[[["kem",4]],["usize",15]],[[["kem",4]],["usize",15]],[[["kem",4]],["usize",15]],[[["kem",4]],["usize",15]],null,null,null,[[["kem",4],["publickey",6]],["publickey",6]],null,null,[[]],[[]],[[],["kem",4]],[[]],[[["kem",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["kem",4]],["u16",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"KEM"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};